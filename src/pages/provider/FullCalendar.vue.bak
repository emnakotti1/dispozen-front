<template>
  <div class="lg:flex lg:h-full lg:flex-col">
    <header
      class="flex items-center justify-between border-b border-gray-200 px-6 py-4 lg:flex-none"
    >
      <h1 class="text-base font-semibold text-gray-900">
        <time :datetime="currentMonth">{{ formatMonthYear(currentDate) }}</time>
      </h1>
      <div class="flex items-center">
        <div
          class="relative flex items-center rounded-md bg-white shadow-sm outline outline-1 -outline-offset-1 outline-gray-300 md:items-stretch"
        >
          <button
            type="button"
            @click="previousMonth"
            class="flex h-9 w-12 items-center justify-center rounded-l-md pr-1 text-gray-400 hover:text-gray-500 focus:relative md:w-9 md:pr-0 md:hover:bg-gray-50"
          >
            <span class="sr-only">Mois précédent</span>
            <ChevronLeftIcon class="size-5" aria-hidden="true" />
          </button>
          <button
            type="button"
            @click="goToToday"
            class="hidden px-3.5 text-sm font-semibold text-gray-900 hover:bg-gray-50 focus:relative md:block"
          >
            Aujourd'hui
          </button>
          <span class="relative -mx-px h-5 w-px bg-gray-300 md:hidden" />
          <button
            type="button"
            @click="nextMonth"
            class="flex h-9 w-12 items-center justify-center rounded-r-md pl-1 text-gray-400 hover:text-gray-500 focus:relative md:w-9 md:pl-0 md:hover:bg-gray-50"
          >
            <span class="sr-only">Mois suivant</span>
            <ChevronRightIcon class="size-5" aria-hidden="true" />
          </button>
        </div>
        <div class="hidden md:ml-4 md:flex md:items-center">
          <Menu as="div" class="relative">
            <MenuButton
              type="button"
              class="flex items-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
            >
              Vue {{ currentView }}
              <ChevronDownIcon
                class="-mr-1 size-5 text-gray-400"
                aria-hidden="true"
              />
            </MenuButton>

            <transition
              enter-active-class="transition ease-out duration-100"
              enter-from-class="transform opacity-0 scale-95"
              enter-to-class="transform opacity-100 scale-100"
              leave-active-class="transition ease-in duration-75"
              leave-from-class="transform opacity-100 scale-100"
              leave-to-class="transform opacity-0 scale-95"
            >
              <MenuItems
                class="absolute right-0 z-10 mt-3 w-36 origin-top-right overflow-hidden rounded-md bg-white shadow-lg outline outline-1 outline-black/5"
              >
                <div class="py-1">
                  <MenuItem v-slot="{ active }">
                    <button
                      @click="currentView = 'mois'"
                      :class="[
                        active
                          ? 'bg-gray-100 text-gray-900 outline-none'
                          : 'text-gray-700',
                        'block px-4 py-2 text-sm w-full text-left',
                      ]"
                    >
                      Vue mois
                    </button>
                  </MenuItem>
                  <MenuItem v-slot="{ active }">
                    <button
                      @click="currentView = 'semaine'"
                      :class="[
                        active
                          ? 'bg-gray-100 text-gray-900 outline-none'
                          : 'text-gray-700',
                        'block px-4 py-2 text-sm w-full text-left',
                      ]"
                    >
                      Vue semaine
                    </button>
                  </MenuItem>
                </div>
              </MenuItems>
            </transition>
          </Menu>
          <div class="ml-6 h-6 w-px bg-gray-300" />
          <button
            type="button"
            @click="showCreateModal = true"
            class="ml-6 rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            Nouveau RDV
          </button>
        </div>
        <Menu as="div" class="relative ml-6 md:hidden">
          <MenuButton
            class="-mx-2 flex items-center rounded-full border border-transparent p-2 text-gray-400 hover:text-gray-500"
          >
            <span class="sr-only">Ouvrir le menu</span>
            <EllipsisHorizontalIcon class="size-5" aria-hidden="true" />
          </MenuButton>

          <transition
            enter-active-class="transition ease-out duration-100"
            enter-from-class="transform opacity-0 scale-95"
            enter-to-class="transform opacity-100 scale-100"
            leave-active-class="transition ease-in duration-75"
            leave-from-class="transform opacity-100 scale-100"
            leave-to-class="transform opacity-0 scale-95"
          >
            <MenuItems
              class="absolute right-0 z-10 mt-3 w-36 origin-top-right divide-y divide-gray-100 overflow-hidden rounded-md bg-white shadow-lg outline outline-1 outline-black/5"
            >
              <div class="py-1">
                <MenuItem v-slot="{ active }">
                  <button
                    @click="showCreateModal = true"
                    :class="[
                      active
                        ? 'bg-gray-100 text-gray-900 outline-none'
                        : 'text-gray-700',
                      'block px-4 py-2 text-sm w-full text-left',
                    ]"
                  >
                    Créer un RDV
                  </button>
                </MenuItem>
              </div>
              <div class="py-1">
                <MenuItem v-slot="{ active }">
                  <button
                    @click="goToToday"
                    :class="[
                      active
                        ? 'bg-gray-100 text-gray-900 outline-none'
                        : 'text-gray-700',
                      'block px-4 py-2 text-sm w-full text-left',
                    ]"
                  >
                    Aller à aujourd'hui
                  </button>
                </MenuItem>
              </div>
              <div class="py-1">
                <MenuItem v-slot="{ active }">
                  <button
                    @click="currentView = 'mois'"
                    :class="[
                      active
                        ? 'bg-gray-100 text-gray-900 outline-none'
                        : 'text-gray-700',
                      'block px-4 py-2 text-sm w-full text-left',
                    ]"
                  >
                    Vue mois
                  </button>
                </MenuItem>
                <MenuItem v-slot="{ active }">
                  <button
                    @click="currentView = 'semaine'"
                    :class="[
                      active
                        ? 'bg-gray-100 text-gray-900 outline-none'
                        : 'text-gray-700',
                      'block px-4 py-2 text-sm w-full text-left',
                    ]"
                  >
                    Vue semaine
                  </button>
                </MenuItem>
              </div>
            </MenuItems>
          </transition>
        </Menu>
      </div>
    </header>

    <!-- Monthly View -->
    <div
      v-if="currentView === 'mois'"
      class="shadow ring-1 ring-black/5 lg:flex lg:flex-auto lg:flex-col"
    >
      <div
        class="grid grid-cols-7 gap-px border-b border-gray-300 bg-gray-200 text-center text-xs/6 font-semibold text-gray-700 lg:flex-none"
      >
        <div class="flex justify-center bg-white py-2">
          <span>L</span>
          <span class="sr-only sm:not-sr-only">undi</span>
        </div>
        <div class="flex justify-center bg-white py-2">
          <span>M</span>
          <span class="sr-only sm:not-sr-only">ardi</span>
        </div>
        <div class="flex justify-center bg-white py-2">
          <span>M</span>
          <span class="sr-only sm:not-sr-only">ercredi</span>
        </div>
        <div class="flex justify-center bg-white py-2">
          <span>J</span>
          <span class="sr-only sm:not-sr-only">eudi</span>
        </div>
        <div class="flex justify-center bg-white py-2">
          <span>V</span>
          <span class="sr-only sm:not-sr-only">endredi</span>
        </div>
        <div class="flex justify-center bg-white py-2">
          <span>S</span>
          <span class="sr-only sm:not-sr-only">amedi</span>
        </div>
        <div class="flex justify-center bg-white py-2">
          <span>D</span>
          <span class="sr-only sm:not-sr-only">imanche</span>
        </div>
      </div>

      <div class="flex bg-gray-200 text-xs/6 text-gray-700 lg:flex-auto">
        <div
          class="hidden w-full lg:grid lg:grid-cols-7 lg:grid-rows-6 lg:gap-px"
        >
          <div
            v-for="day in days"
            :key="day.date"
            :data-is-current-month="day.isCurrentMonth ? '' : undefined"
            :data-is-today="day.isToday ? '' : undefined"
            class="group relative bg-gray-50 px-3 py-2 text-gray-500 data-[is-current-month]:bg-white min-h-[120px]"
          >
            <time
              :datetime="day.date"
              class="relative group-[:not([data-is-current-month])]:opacity-75 [[data-is-today]_&]:flex [[data-is-today]_&]:size-6 [[data-is-today]_&]:items-center [[data-is-today]_&]:justify-center [[data-is-today]_&]:rounded-full [[data-is-today]_&]:bg-indigo-600 [[data-is-today]_&]:font-semibold [[data-is-today]_&]:text-white"
            >
              {{ day.date.split('-').pop().replace(/^0/, '') }}
            </time>

            <div v-if="day.events.length > 0" class="mt-2 space-y-1">
              <div
                v-for="event in day.events.slice(0, 3)"
                :key="event.id"
                class="group flex cursor-pointer"
                @click="selectEvent(event)"
              >
                <div
                  class="flex-auto truncate rounded px-2 py-1 text-xs font-medium"
                  :class="getEventClasses(event)"
                >
                  {{ event.time }} {{ event.client.name }}
                </div>
              </div>
              <div
                v-if="day.events.length > 3"
                class="text-gray-500 text-xs px-2"
              >
                + {{ day.events.length - 3 }} autre(s)
              </div>
            </div>
          </div>
        </div>

        <!-- Mobile view -->
        <div
          class="isolate grid w-full grid-cols-7 grid-rows-6 gap-px lg:hidden"
        >
          <button
            v-for="day in days"
            :key="day.date"
            type="button"
            :data-is-current-month="day.isCurrentMonth ? '' : undefined"
            :data-is-selected="day.isSelected ? '' : undefined"
            :data-is-today="day.isToday ? '' : undefined"
            class="group relative flex h-14 flex-col px-3 py-2 hover:bg-gray-100 focus:z-10 data-[is-current-month]:bg-white data-[is-selected]:font-semibold data-[is-today]:font-semibold data-[is-selected]:text-white data-[is-current-month]:hover:bg-gray-100 [&:not([data-is-current-month])]:bg-gray-50 [&:not([data-is-selected])]:data-[is-today]:text-indigo-600 [&:not([data-is-selected])]:data-[is-current-month]:[&:not([data-is-today])]:text-gray-900 [&:not([data-is-selected])]:[&:not([data-is-current-month])]:[&:not([data-is-today])]:text-gray-500"
            @click="selectDay(day)"
          >
            <time
              :datetime="day.date"
              class="ml-auto group-[:not([data-is-current-month])]:opacity-75 [[data-is-selected]_&]:flex [[data-is-selected]_&]:size-6 [[data-is-selected]_&]:items-center [[data-is-selected]_&]:justify-center [[data-is-selected]_&]:rounded-full [[data-is-selected]_&]:[&:not([data-is-today]_*)]:bg-gray-900 [[data-is-selected]_&]:[[data-is-today]_&]:bg-indigo-600"
            >
              {{ day.date.split('-').pop().replace(/^0/, '') }}
            </time>
            <span class="sr-only">{{ day.events.length }} événements</span>
            <span
              v-if="day.events.length > 0"
              class="-mx-0.5 mt-auto flex flex-wrap-reverse"
            >
              <span
                v-for="event in day.events"
                :key="event.id"
                class="mx-0.5 mb-1 size-1.5 rounded-full"
                :class="getEventDotClass(event)"
              />
            </span>
          </button>
        </div>
      </div>
    </div>

    <!-- Week View -->
    <div
      v-else-if="currentView === 'semaine'"
      class="flex flex-auto overflow-hidden bg-white"
    >
      <div class="flex flex-auto flex-col overflow-auto">
        <div
          class="sticky top-0 z-10 grid flex-none grid-cols-8 bg-white text-xs text-gray-500 shadow ring-1 ring-black/5 md:hidden"
        >
          <div class="bg-gray-50"></div>
          <div
            v-for="day in weekDays"
            :key="day.date"
            class="flex flex-col items-center pb-3 pt-2"
          >
            <span>{{ day.dayOfWeek }}</span>
            <span
              class="mt-1 flex h-8 w-8 items-center justify-center font-semibold text-gray-900"
              :class="
                day.isToday ? 'rounded-full bg-indigo-600 text-white' : ''
              "
            >
              {{ day.dayOfMonth }}
            </span>
          </div>
        </div>

        <div class="flex w-full flex-auto">
          <div class="w-14 flex-none bg-white ring-1 ring-gray-100"></div>
          <div class="grid flex-auto grid-cols-1 grid-rows-1">
            <!-- Horizontal lines -->
            <div
              class="col-start-1 col-end-2 row-start-1 grid divide-y divide-gray-100"
              style="grid-template-rows: repeat(48, minmax(3.5rem, 1fr))"
            >
              <div class="row-end-1 h-7"></div>
              <div
                v-for="hour in 24"
                :key="hour - 1"
                class="sticky left-0 -ml-14 -mt-2.5 w-14 pr-2 text-right text-xs leading-5 text-gray-400 md:left-0"
              >
                {{ formatWeekHour(hour - 1) }}
              </div>
            </div>

            <!-- Vertical lines -->
            <div
              class="col-start-1 col-end-2 row-start-1 hidden grid-cols-7 grid-rows-1 divide-x divide-gray-100 md:grid md:grid-cols-7"
            >
              <div
                v-for="day in 7"
                :key="day"
                class="col-start-1 row-start-1 row-end-1"
                :style="`grid-column: ${day}`"
              ></div>
            </div>

            <!-- Events -->
            <ol
              class="col-start-1 col-end-2 row-start-1 grid grid-cols-1 md:grid-cols-7"
              style="
                grid-template-rows: 1.75rem repeat(288, minmax(0, 1fr)) auto;
              "
            >
              <li
                v-for="event in weekEvents"
                :key="event.id"
                class="relative mt-px flex cursor-pointer"
                :style="getWeekEventStyle(event)"
                @click="selectEvent(event)"
              >
                <div
                  class="group absolute inset-1 flex flex-col overflow-y-auto rounded-lg p-2 text-xs leading-5"
                  :class="getEventClasses(event)"
                >
                  <p class="order-1 font-semibold text-gray-700">
                    {{ event.client.name }}
                  </p>
                  <p class="text-gray-500">{{ event.service.name }}</p>
                  <p class="order-2 text-gray-500">{{ event.time }}</p>
                </div>
              </li>
            </ol>
          </div>
        </div>
      </div>
    </div>

    <!-- Mobile event list for selected day -->
    <div
      v-if="selectedDay && selectedDay.events.length > 0"
      class="px-4 py-10 sm:px-6 lg:hidden"
    >
      <ol
        class="divide-y divide-gray-100 overflow-hidden rounded-lg bg-white text-sm shadow outline outline-1 outline-black/5"
      >
        <li
          v-for="event in selectedDay.events"
          :key="event.id"
          class="group flex p-4 pr-6 focus-within:bg-gray-50 hover:bg-gray-50 cursor-pointer"
          @click="selectEvent(event)"
        >
          <div class="flex-auto">
            <p class="font-semibold text-gray-900">{{ event.client.name }}</p>
            <p class="mt-2 text-gray-500">{{ event.service.name }}</p>
            <time
              :datetime="event.datetime"
              class="mt-2 flex items-center text-gray-700"
            >
              <ClockIcon class="mr-2 size-5 text-gray-400" aria-hidden="true" />
              {{ event.time }}
            </time>
          </div>
          <span
            class="ml-6 flex-none self-center rounded-full px-2 py-1 text-xs font-medium"
            :class="getStatusClass(event.status)"
          >
            {{ getStatusLabel(event.status) }}
          </span>
        </li>
      </ol>
    </div>

    <!-- Event Details Modal -->
    <EventDetailsModal
      v-if="selectedEvent"
      :event="selectedEvent"
      @close="selectedEvent = null"
      @edit="editEvent"
      @confirm="confirmEvent"
      @complete="completeEvent"
      @cancel="cancelEvent"
    />

    <!-- Create Appointment Modal -->
    <AppointmentModal
      v-if="showCreateModal"
      @close="showCreateModal = false"
      @save="saveAppointment"
    />
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue'
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  ClockIcon,
  EllipsisHorizontalIcon,
} from '@heroicons/vue/20/solid'
import { Menu, MenuButton, MenuItem, MenuItems } from '@headlessui/vue'
import EventDetailsModal from '../../components/EventDetailsModal.vue'
import AppointmentModal from '../../components/AppointmentModal.vue'

// State
const currentDate = ref(new Date())
const currentView = ref('mois')
const selectedDay = ref(null)
const selectedEvent = ref(null)
const showCreateModal = ref(false)

// Mock appointments data
const appointments = ref([
  {
    id: 1,
    client: { name: 'Marie Dubois' },
    service: { name: 'Consultation', duration: 60 },
    date: '2024-08-10',
    time: '09:00',
    datetime: '2024-08-10T09:00',
    status: 'confirmed',
  },
  {
    id: 2,
    client: { name: 'Pierre Martin' },
    service: { name: 'Suivi', duration: 45 },
    date: '2024-08-10',
    time: '14:30',
    datetime: '2024-08-10T14:30',
    status: 'pending',
  },
  {
    id: 3,
    client: { name: 'Sophie Laurent' },
    service: { name: 'Thérapie', duration: 60 },
    date: '2024-08-12',
    time: '16:00',
    datetime: '2024-08-12T16:00',
    status: 'confirmed',
  },
])

// Computed
const currentMonth = computed(() => {
  return currentDate.value.toISOString().slice(0, 7)
})

const days = computed(() => {
  const year = currentDate.value.getFullYear()
  const month = currentDate.value.getMonth()

  // Premier jour du mois
  const firstDay = new Date(year, month, 1)
  // Dernier jour du mois
  const lastDay = new Date(year, month + 1, 0)

  // Premier lundi de la grille
  const startDate = new Date(firstDay)
  const dayOfWeek = firstDay.getDay() || 7 // 0 = dimanche devient 7
  startDate.setDate(firstDay.getDate() - dayOfWeek + 1)

  const days = []
  const today = new Date()

  for (let i = 0; i < 42; i++) {
    const date = new Date(startDate)
    date.setDate(startDate.getDate() + i)

    const dateString = date.toISOString().split('T')[0]
    const dayEvents = appointments.value.filter(apt => apt.date === dateString)

    days.push({
      date: dateString,
      isCurrentMonth: date.getMonth() === month,
      isToday: date.toDateString() === today.toDateString(),
      isSelected: false,
      events: dayEvents,
    })
  }

  return days
})

const weekDays = computed(() => {
  // Get current week starting from Monday
  const today = new Date(currentDate.value)
  const dayOfWeek = today.getDay() || 7 // 0 = dimanche devient 7
  const monday = new Date(today)
  monday.setDate(today.getDate() - dayOfWeek + 1)

  const days = []
  const todayString = new Date().toDateString()

  for (let i = 0; i < 7; i++) {
    const date = new Date(monday)
    date.setDate(monday.getDate() + i)

    days.push({
      date: date.toISOString().split('T')[0],
      dayOfWeek: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'][i],
      dayOfMonth: date.getDate(),
      isToday: date.toDateString() === todayString,
    })
  }

  return days
})

const weekEvents = computed(() => {
  const weekStart = weekDays.value[0]?.date
  const weekEnd = weekDays.value[6]?.date

  return appointments.value.filter(
    apt => apt.date >= weekStart && apt.date <= weekEnd,
  )
})

// Methods
function formatMonthYear(date: Date) {
  return date.toLocaleDateString('fr-FR', { month: 'long', year: 'numeric' })
}

function formatWeekHour(hour: number) {
  return `${hour.toString().padStart(2, '0')}:00`
}

function previousMonth() {
  const newDate = new Date(currentDate.value)
  newDate.setMonth(newDate.getMonth() - 1)
  currentDate.value = newDate
}

function nextMonth() {
  const newDate = new Date(currentDate.value)
  newDate.setMonth(newDate.getMonth() + 1)
  currentDate.value = newDate
}

function goToToday() {
  currentDate.value = new Date()
  selectedDay.value = null
}

function selectDay(day: any) {
  selectedDay.value = day
}

function selectEvent(event: any) {
  selectedEvent.value = event
}

function getEventClasses(event: any) {
  switch (event.status) {
    case 'confirmed':
      return 'bg-green-100 text-green-800 border-green-200'
    case 'pending':
      return 'bg-yellow-100 text-yellow-800 border-yellow-200'
    case 'cancelled':
      return 'bg-red-100 text-red-800 border-red-200'
    case 'completed':
      return 'bg-blue-100 text-blue-800 border-blue-200'
    default:
      return 'bg-gray-100 text-gray-800 border-gray-200'
  }
}

function getEventDotClass(event: any) {
  switch (event.status) {
    case 'confirmed':
      return 'bg-green-400'
    case 'pending':
      return 'bg-yellow-400'
    case 'cancelled':
      return 'bg-red-400'
    case 'completed':
      return 'bg-blue-400'
    default:
      return 'bg-gray-400'
  }
}

function getStatusClass(status: string) {
  switch (status) {
    case 'confirmed':
      return 'bg-green-100 text-green-800'
    case 'pending':
      return 'bg-yellow-100 text-yellow-800'
    case 'cancelled':
      return 'bg-red-100 text-red-800'
    case 'completed':
      return 'bg-blue-100 text-blue-800'
    default:
      return 'bg-gray-100 text-gray-800'
  }
}

function getStatusLabel(status: string) {
  switch (status) {
    case 'confirmed':
      return 'Confirmé'
    case 'pending':
      return 'En attente'
    case 'cancelled':
      return 'Annulé'
    case 'completed':
      return 'Terminé'
    default:
      return status
  }
}

function getWeekEventStyle(event: any) {
  const [hours, minutes] = event.time.split(':').map(Number)
  const startMinutes = hours * 60 + minutes
  const duration = event.service.duration

  // Calculate grid position (1.75rem header + 288 rows for 24 hours)
  const startRow = Math.floor(startMinutes / 5) + 2 // +2 for header
  const endRow = startRow + Math.floor(duration / 5)

  // Calculate column (day of week)
  const eventDate = new Date(event.date)
  const dayOfWeek = eventDate.getDay() || 7 // 0 = dimanche devient 7
  const column = dayOfWeek // Monday = 1, Sunday = 7

  return {
    gridColumn: column,
    gridRow: `${startRow} / ${endRow}`,
  }
}

function editEvent(event: any) {
  // Handle edit event
  console.log('Edit event:', event)
}

function confirmEvent(eventId: number) {
  const event = appointments.value.find(apt => apt.id === eventId)
  if (event) {
    event.status = 'confirmed'
  }
}

function completeEvent(eventId: number) {
  const event = appointments.value.find(apt => apt.id === eventId)
  if (event) {
    event.status = 'completed'
  }
}

function cancelEvent(eventId: number) {
  const event = appointments.value.find(apt => apt.id === eventId)
  if (event) {
    event.status = 'cancelled'
  }
}

function saveAppointment(appointmentData: any) {
  const newAppointment = {
    ...appointmentData,
    id: Date.now(),
  }
  appointments.value.push(newAppointment)
  showCreateModal.value = false
}

onMounted(() => {
  // Load appointments data
})
</script>
